class Solution 
{
    public:
	vector<vector<int>>nearest(vector<vector<int>>grid)
	{
	   int n=grid.size();
	   int m= grid[0].size();
	   vector<vector<int>> v(n,vector<int>(m,0));
	   vector<vector<int>> ans(n,vector<int>(m,0));
	   queue<pair<pair<int,int>,int>> q;
	   for(int i=0;i<n;i++){
	       for(int j=0;j<m;j++){
	           if(grid[i][j]==1){
	               v[i][j]=1;
	               q.push({{i,j},0});
	           }
	       }
	   }
	   int delr[]={0,-1,0,1};
	   int delc[]={1,0,-1,0};
	   while(!q.empty()){
	       int r=q.front().first.first;
	       int c=q.front().first.second;
	       int d=q.front().second;
	       q.pop();
	       ans[r][c]=d;
	       for(int i=0;i<4;i++){
	           int nrow=r+delr[i];
	           int ncol=c+delc[i];
	           if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && !v[nrow][ncol] && grid[nrow][ncol]==0){
	               v[nrow][ncol]=1;
	               q.push({{nrow,ncol},d+1});
	           }
	       }
	   }
	   return ans;
	}
};
