 #include<bits/stdc++.h>
 using namespace std;
 
bool check(int A,int B,vector<vector<int>>& v)
{
    vector<pair<int,int>> vec={{1,0},{1,-1},{1,1},{0,1},{0,-1},{-1,1},{-1,-1},{-1,0}};
    int n=v.size(),m=v[0].size();
    queue<pair<int,int>> qu;
    qu.push({0,0});
    if(v[0][0]==1)
    return 0;
    while(!qu.empty())
    {
        auto [x,y]=qu.front();
        qu.pop();
        
        for(auto [it,jt]:vec)
        {
            int dx=it+x;
            int dy=jt+y; 
            
            if(dx>=0&&dx<n&&dy>=0&&dy<m&&v[dx][dy]==0)
            { 
                v[dx][dy]=1;
                qu.push({dx,dy}); 
                if(dx==A && dy==B)
                return 1;
            }
        }
    }  
    return 0;
}
 void bfs(int i,int j,int r,vector<vector<int>>& v)
{
    vector<pair<int,int>> vec={{1,0},{1,-1},{1,1},{0,1},{0,-1},{-1,1},{-1,-1},{-1,0}};
    int n=v.size(),m=v[0].size();
    vector<vector<int>> temp(n,vector<int> (m,0));
    queue<pair<int,int>> qu;
    qu.push({i,j});
    v[i][j]=1;
    temp[i][j]=1;
    while(!qu.empty())
    {
        auto [x,y]=qu.front();
        qu.pop();
        
        for(auto [it,jt]:vec)
        {
            int dx=it+x;
            int dy=jt+y;
            int d=(abs(dx-i)*abs(dx-i) + abs(dy-j)*abs(dy-j));
            
            if(dx>=0 && dx<n && dy>=0 && dy<m && (d<=r*r) && temp[dx][dy]==0)
            { 
                qu.push({dx,dy});
                v[dx][dy]=1;
                temp[dx][dy]=1;
            }
        }
    } 
}
string Solution::solve(int A, int B, int C, int D, vector<int> &E, vector<int> &F) {
    vector<vector<int>> v(A+1,vector<int> (B+1,0));
    
    for(int i=0;i<C;i++)
    { 
        bfs(E[i],F[i],D,v);
    } 
    
    bool res=check(A,B,v);
    
    if(res)
    return "YES";
    else 
    return "NO";
}
