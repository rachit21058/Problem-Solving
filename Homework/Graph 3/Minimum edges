class Solution{
    public:
        int minimumEdgeReversal(vector<vector<int>> &edges,int n,int src,int dst)
        {
            vector<int> dist(n+1,INT_MAX);
            vector<pair<int,int>> v[n+1];
            for(int i=0;i<edges.size();i++){
                v[edges[i][0]].push_back({edges[i][1],0});
                v[edges[i][1]].push_back({edges[i][0],1});
            }
            dist[src]=0;
            deque<pair<int,int>> dq;
            dq.push_front({src,0});
            while(!dq.empty()){
                int node=dq.front().first;
                int d=dq.front().second;
                dq.pop_front();
                if(node==dst)
                 return d;
                for(auto it:v[node]){
                    int vNode=it.first;
                    int weight=it.second;
                    if(d+weight<dist[vNode]){
                      dist[vNode] = d+weight;
                      if(weight)
                       dq.push_back({vNode,dist[vNode]});
                      else
                       dq.push_front({vNode,dist[vNode]});
                       
                    }
                }
            }
            return -1;
        }
};
