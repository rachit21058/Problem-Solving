class Solution {
public:
    void dfs(vector<int> v[], int src, int p, vector<bool> &&check, vector<vector<int>> &ans){
        check[src]=true;
        for(auto it:v[src]){
            if(check[it])
                continue;
            ans[it].push_back(p);
            dfs(v,it,p, move(check), ans);
        }
    }
    vector<vector<int>> getAncestors(int n, vector<vector<int>>& edges) {
        vector<int> v[n];
        for(int i=0;i<edges.size();i++){
            v[edges[i][0]].push_back(edges[i][1]);
        }
        vector<vector<int>> ans(n);
        vector<bool> check(n,false);
        for(int i=0;i<n;i++){
            dfs(v,i,i, vector<bool>(n), ans);
        }
        return ans;
    }
};
