class TrieNode{
    public:
    TrieNode *child[2];
    int cnt;
    TrieNode(){
        for(int i=0;i<2;i++)
             child[i]=nullptr;
        cnt=0;
    }
};
class Trie
{
   public:
    TrieNode *root;
    Trie()
     {
         root=new TrieNode();
     } 
    int Xor(int num,int k)
     {
        TrieNode *newnode=root;
        int cnt = 0;
        for(int i=15;i>=0;i--)
        {
            int b_num = (num>>i)&1;
            int b_k = (k>>i)&1;
            if(b_k == 1)
            {
                if(newnode->child[b_num] != NULL)
                  cnt += newnode->child[b_num]->cnt;
                newnode=newnode->child[1-b_num];  
            }
            else if(b_k == 0)
            {
                newnode =newnode->child[b_num];
            }
            if(newnode==NULL)
            break;
        }
        return cnt;
     }
    void insert(int num)
    {
        TrieNode *newnode=root;
        for(int i=15;i>=0;i--)
        {
            int bit = (num>>i)& 1;
            if(newnode->child[bit] == NULL)
              newnode->child[bit] = new TrieNode();
            newnode = newnode->child[bit];
            newnode->cnt++;
        }
     }
};
class Solution {
public:
    int countPairs(vector<int>& nums, int low, int high) {
        Trie* root = new Trie();
        int n = nums.size();
        int a= 0;
        root->insert(nums[0]);
        for(int i=1;i<n;i++)
        {
        a+= root->Xor(nums[i],high+1)-root->Xor(nums[i],low);
        root->insert(nums[i]);
        }  
        return a;
    }
};
