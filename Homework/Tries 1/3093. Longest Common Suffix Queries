class TrieNode{
    public:
    TrieNode *child[26];
    int a;
    int size;
    TrieNode(){
        for(int i=0;i<26;i++)
            child[i]=nullptr;
        a=INT_MAX;
        size=INT_MAX;
    }
};
class Trie{
    public: 
    TrieNode *root;
    Trie(){
        root=new TrieNode();
    }
    int check(string query){
        TrieNode *newnode=root;
        int m=query.length()-1;
        for(int i=m;i>=0;i--){
            char ch=query[i];
            if(newnode->child[ch-'a']==nullptr)
                break;
            newnode=newnode->child[ch-'a'];
        }
        return newnode->a;
    }
    void insert(string s, int index, int len){
        TrieNode *newnode=root;
        int n=s.length()-1;
        for(int i=n;i>=0;i--)
        {
            if(newnode->size>len){
                newnode->size=len;
                newnode->a=index;
            }
            char ch=s[i];
            if(newnode->child[ch-'a']==nullptr)
                newnode->child[ch-'a']=new TrieNode();
            newnode=newnode->child[ch-'a'];
            if(newnode->size>len){
                newnode->size=len;
                newnode->a=index;
            }
        }
    }
    
};
class Solution {
public:
    vector<int> stringIndices(vector<string>& wordsContainer, vector<string>& wordsQuery) 
    {
        Trie *root=new Trie();
        int i=0;
        for(auto word:wordsContainer){
            root->insert(word,i,word.length());
            i++;
        }
        vector<int> res;
        for(auto query:wordsQuery)
            res.push_back(root->check(query));
        return res;
    }
};
