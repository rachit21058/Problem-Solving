class TrieNode{
    public:
    TrieNode *child[26];
    bool isEnd;
    TrieNode(){
        for(int i=0;i<26;i++)
             child[i]=nullptr;
        isEnd=false;
    }
};
class Trie {
    TrieNode *root;
public:
    Trie() {
        root=new TrieNode();
    }
    
    void insert(string word) {
        TrieNode *newnode=root;
        for(int i=0;i<word.length();i++)
       {
           char ch=word[i];
           if(newnode->child[ch-'a']==nullptr){
               newnode->child[ch-'a']=new TrieNode();
           }
           newnode=newnode->child[ch-'a'];   
       }
        newnode->isEnd=true;
    }
    
    bool search(string word) {
        TrieNode *newnode=root;
        int m=word.length();
        for(int i=0;i<m;i++){
            char ch=word[i];
            if(newnode->child[ch-'a']==nullptr)
                return false;
            newnode=newnode->child[ch-'a'];
        }
        if(newnode->isEnd)
            return true;
        return false;
    }
    
    bool startsWith(string prefix) {
        TrieNode *newnode=root;
        int n=prefix.length();
        for(int i=0;i<n;i++){
            char ch=prefix[i];
            if(newnode->child[ch-'a']==nullptr)
                return false;
            newnode=newnode->child[ch-'a'];
        }
        return true;
    }
};
