class Solution {
public:
    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start_node, int end_node) {
      vector<pair<int,double>> v[n];
        for(int i=0;i<edges.size();i++){
           v[edges[i][0]].push_back({edges[i][1],succProb[i]}); 
           v[edges[i][1]].push_back({edges[i][0], succProb[i]});
        }
        vector<double> dist(n,0.0);
        priority_queue<pair<double,int>> pq;
        pq.push({1.0,start_node});
        dist[start_node]=1.0;
        while(!pq.empty()){
            double p=pq.top().first;
            int temp=pq.top().second;
            pq.pop();
            if(temp==end_node)
                return p;
            for(auto it:v[temp]){
                int Node=it.first;
                double edge=it.second;
                double Prob=p*edge;
                if( dist[Node]<Prob){
                    dist[Node]=p*edge;
                    pq.push({Prob,Node});
                }
            }
        }
        return 0.00000;   
    }
};
