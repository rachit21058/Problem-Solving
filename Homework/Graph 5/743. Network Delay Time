class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
      vector<pair<int,int>> v[n+1];
        for(int i=0;i<times.size();i++){
            v[times[i][0]].push_back({times[i][1],times[i][2]});
        }
        queue<pair<int,pair<int,int>>> q;
        q.push({0,{k,0}});
        int ans=0;
        vector<int> dist(n+1,INT_MAX);
        dist[k]=0;
        while(!q.empty()){
            int time=q.front().first;
            int temp=q.front().second.first;
            int w=q.front().second.second;
            q.pop();
            for(auto it:v[temp]){
                int adjNode=it.first;
                int adjw=it.second;
                int ttime=time+adjw;
                if(dist[adjNode]>ttime){
                    dist[adjNode]=ttime;
                    q.push({ttime,{adjNode,adjw}});
                }
            }
        }
        for(int i=1;i<dist.size();i++){
            if(dist[i]==INT_MAX)
                return -1;
            else if(dist[i]>ans)
                ans=dist[i];
        }
        return ans;  
    }
};
