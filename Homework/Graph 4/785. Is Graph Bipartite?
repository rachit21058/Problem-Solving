class Solution {
public:
    bool bipartite(unordered_map<int,vector<int>> &m,int source,vector<int> &v){
        queue<int>q;
        q.push(source);
        v[source]=0;
        while(!q.empty()){
            int temp=q.front();
            q.pop();
            for(auto it:m[temp]){
                if(v[it]==-1){
                    v[it]=!v[temp];
                    q.push(it);
                }
                else if(v[temp]==v[it]){
                    return false;
                }
            }
        }
        return true;
    }
    bool isBipartite(vector<vector<int>>& graph) {
        
        unordered_map<int,vector<int>> m;
        for(int i=0;i<graph.size();i++){
            for(auto it:graph[i]){
                m[i].push_back(it);
                m[it].push_back(i);
            }
        }
        vector<int> v(graph.size(),-1);
        bool res=false;
        for(int i=0;i<graph.size();i++){
            if(v[i]==-1){
                 res=bipartite(m,i,v);
                if(res==false) 
                return false;
            }
        }
        return true;;
    }
};
