void leftB(TreeNode<int>*root,vector<int>&v){
   TreeNode<int>*curr=root->left;
    while(curr){
        if(!isleaf(curr))
        v.push_back(curr->data);
        if(curr->left)
        curr=curr->left;
        else
        curr=curr->right;
    }
}
void rightB(TreeNode<int>*root,vector<int>&v){
    TreeNode<int>*curr=root->right;
    vector<int> temp;
    while(curr){
        if(!isleaf(curr))
        temp.push_back(curr->data);
        if(curr->right)
        curr=curr->right;
        else
        curr=curr->left;
    }
    for(int i=temp.size()-1;i>=0;i--){
        v.push_back(temp[i]);
    }
}
void leaf(TreeNode<int>*root,vector<int>&v){
    if(isLeaf(root)){
        v.push_back(root->data);
        return;
    }
    if(root->left)
    leaf(root->left,v);
    if(root->right)
    leaf(root->right,v);
}
vector<int> traverseBoundary(TreeNode<int> *root)
{
    vector<int> v;
    if(!root){
        return v;
    }
    if(!isleaf(root))
    v.push_back(root->data);	
    leftB(root,v);
    leaf(root,v);
    rightB(root,v);
    return v;
}
