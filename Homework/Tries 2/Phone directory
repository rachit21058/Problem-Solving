class TrieNode{
    public:
     TrieNode *child[26];
     vector<string> w;
     TrieNode(){
         for(int i=0;i<26;i++)
          child[i]=nullptr;
     }
};
class Trie{
    public:
    TrieNode *root;
     Trie(){
         root=new TrieNode();
     }
     void query(string st, vector<vector<string>> &ans){
         TrieNode *node=root;
         int n=st.length();
         for(int i=0;i<n;i++){
             char ch=st[i];
             if(node->child[ch-'a']==nullptr){
              for(;i<st.length();i++){
                  ans.push_back({"0"});
              }
             }
             else {
              node=node->child[ch-'a'];
              ans.push_back(node->w);
             }
         }
     }
      void insert(string st){
         TrieNode *node=root;
         int n=st.length();
         for(int i=0;i<n;i++){
             char ch=st[i];
             if(node->child[ch-'a']==nullptr)
              node->child[ch-'a']=new TrieNode();
             node=node->child[ch-'a'];
             node->w.push_back(st);
         }
     }
     
};
class Solution{
public:
    vector<vector<string>> displayContacts(int n, string contact[], string s)
    {
        set<string> st;
        for(int i=0;i<n;i++){
           st.insert(contact[i]); 
        }
        vector<string> contacts;
        for(auto it:st){
            contacts.push_back(it);
        }
        Trie *root= new Trie();
        for(int i=0;i<contacts.size();i++)
         root->insert(contacts[i]);
        vector<vector<string>> ans;
        root->query(s,ans);
        return ans;
    }
};
